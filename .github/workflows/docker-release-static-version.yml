name: Docker release image

on:
  workflow_call:
    inputs:
      GLOBAL_REPO_NAME:
        required: true
        type: string
      PATH_TO_DOCKERFILE:
        required: true
        type: string
      GLOBAL_IMAGE_NAME:
        required: true
        type: string
      GLOBAL_RELEASE_VERSION:
        required: true
        type: string
    secrets:
      VAULT_ADDR:
        required: true
      CI_SECRET_READER_PERIODIC_TOKEN:
        required: true
      VAULTCA:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:

  build-context:
    runs-on: ubuntu-latest
    steps:
      - uses: danubetech/github-action-log-build-context@v0.1.0

  create-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Set user data
        run: |
          git config --global user.email "admin@danubetech.com"
          git config --global user.name "Github Workflow"

      - name: Create tag
        run: git tag -a "${{ inputs.GLOBAL_RELEASE_VERSION }}" -m "[skip ci] Release tag ${{ inputs.GLOBAL_RELEASE_VERSION }}"

      - name: Push tag
        run: git push origin "${{ inputs.GLOBAL_RELEASE_VERSION }}"

      - name: Slack notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  publish-image:
    needs: [create-tag]
    runs-on: ubuntu-latest
    steps:

      - name: Import Secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.CI_SECRET_READER_PERIODIC_TOKEN }}
          caCertificate: ${{ secrets.VAULTCA }}
          secrets: |
            ci/data/gh-workflows/${{ inputs.GLOBAL_REPO_NAME }} username | DOCKER_USERNAME ;
            ci/data/gh-workflows/${{ inputs.GLOBAL_REPO_NAME }} password | DOCKER_PASSWORD ;
            ci/data/gh-workflows/maven-danubetech-nexus username | MAVEN_USERNAME ;
            ci/data/gh-workflows/maven-danubetech-nexus password | MAVEN_PASSWORD

      - uses: actions/checkout@master
        with:
          ref: ${{ inputs.GLOBAL_RELEASE_VERSION }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Set SHORT_SHA env variable
        id: short_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker Metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.GLOBAL_REPO_NAME }}/${{ inputs.GLOBAL_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.GLOBAL_RELEASE_VERSION }}-${{ steps.short_sha.outputs.SHORT_SHA }}

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.GLOBAL_REPO_NAME }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.PATH_TO_DOCKERFILE }}
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            DANUBETECH_MAVEN_INTERNAL_USERNAME=${{ env.MAVEN_USERNAME }}
            DANUBETECH_MAVEN_INTERNAL_PASSWORD=${{ env.MAVEN_PASSWORD }}
          cache-from: type=gha,scope=docker-release-static
          cache-to: type=gha,scope=docker-release-static,mode=max
          platforms: linux/amd64

      - name: Slack notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Remove release tag
        if: failure()
        run: |
          git tag -d "${{ inputs.GLOBAL_RELEASE_VERSION }}"
          git push --delete origin "${{ inputs.GLOBAL_RELEASE_VERSION }}"
