name: Docker release image

on:
  workflow_call:
    inputs:
      GLOBAL_REPO_NAME:
        required: true
        type: string
      PATH_TO_DOCKERFILE:
        required: true
        type: string
      GLOBAL_IMAGE_NAME:
        required: true
        type: string
      GLOBAL_FRAMEWORK:
        required: true
        type: string
    secrets:
      VAULT_ADDR:
        required: true
      CI_SECRET_READER_PERIODIC_TOKEN:
        required: true
      VAULTCA:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  build-context:
    runs-on: ubuntu-latest
    steps:
      - uses: danubetech/github-action-log-build-context@v0.1.0

  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write

    steps:
      - name: Import Secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.CI_SECRET_READER_PERIODIC_TOKEN }}
          caCertificate: ${{ secrets.VAULTCA }}
          secrets: |
            ci/data/gh-workflows/${{ inputs.GLOBAL_REPO_NAME }} username | DOCKER_USERNAME ;
            ci/data/gh-workflows/${{ inputs.GLOBAL_REPO_NAME }} password | DOCKER_PASSWORD ;
            ci/data/gh-workflows/maven-danubetech-nexus username | MAVEN_USERNAME ;
            ci/data/gh-workflows/maven-danubetech-nexus password | MAVEN_PASSWORD

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js environment
        if: ${{ inputs.GLOBAL_FRAMEWORK == 'node' }}
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Setup Java
        if: ${{ inputs.GLOBAL_FRAMEWORK == 'maven' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Prepare multi server settings file
        if: ${{ inputs.GLOBAL_FRAMEWORK == 'maven' }}
        uses: danubetech/github-action-prepare-maven-settings-xml@master
        with:
          server_ids: danubetech-maven-releases,danubetech-maven-internal

      - name: Validate pom.xml
        if: ${{ inputs.GLOBAL_FRAMEWORK == 'maven' }}
        run: |
          echo "$SETTINGS_FILE" > ./multi-server-template.xml
          envsubst < ./multi-server-template.xml > ./settings.xml
          mvn validate -P ci --settings ./settings.xml

      - name: Increment Maven Version
        if: ${{ inputs.GLOBAL_FRAMEWORK == 'maven' }}
        id: increment-version-maven
        run: |
          RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | awk -F. -v OFS=. '{$NF+=1; print}')
          mvn versions:set -DnewVersion=$RELEASE_VERSION
          mvn versions:commit
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          git add pom.xml
          git commit -m "[skip ci] Bump version to $RELEASE_VERSION"
          git push origin HEAD:${{ github.ref }}

      - name: Increment Node Version
        if: ${{ inputs.GLOBAL_FRAMEWORK == 'node' }}
        id: increment-version-node
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Split version into major, minor, and patch
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # Increment version based on release type
          case "${{ github.event.inputs.release_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
            *)
              echo "Invalid release type: ${{ github.event.inputs.release_type }}"
              exit 1
              ;;
          esac
          
          # Construct new version
          NEW_VERSION="${major}.${minor}.${patch}"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          git add package.json package-lock.json
          git commit -m "[skip ci] Bump version $NEW_VERSION"
          git push origin HEAD:${{ github.ref }}

      - name: Set SHORT_SHA env variable
        id: short_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build image
        if: ${{ inputs.GLOBAL_FRAMEWORK == 'maven' }}
        run: |
          docker build . -f "${{ inputs.PATH_TO_DOCKERFILE }}" -t "${{ inputs.GLOBAL_REPO_NAME }}/${{ inputs.GLOBAL_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-${{ steps.short_sha.outputs.SHORT_SHA }}" \
          --build-arg DANUBETECH_MAVEN_INTERNAL_USERNAME=${{ env.MAVEN_USERNAME }} \
          --build-arg DANUBETECH_MAVEN_INTERNAL_PASSWORD=${{ env.MAVEN_PASSWORD }}

      - name: Build image
        if: ${{ inputs.GLOBAL_FRAMEWORK == 'node' }}
        run: |
          docker build . -f "${{ inputs.PATH_TO_DOCKERFILE }}" -t "${{ inputs.GLOBAL_REPO_NAME }}/${{ inputs.GLOBAL_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-${{ steps.short_sha.outputs.SHORT_SHA }}"

      - name: Login user to repo and push image
        run: |
          echo "${{ env.DOCKER_PASSWORD }}" | docker login "${{ inputs.GLOBAL_REPO_NAME }}" -u "${{ env.DOCKER_USERNAME }}" --password-stdin
          docker push "${{ inputs.GLOBAL_REPO_NAME }}/${{ inputs.GLOBAL_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-${{ steps.short_sha.outputs.SHORT_SHA }}"

      - name: Create and Push Git Tag
        if: success() && (steps.increment-version-maven.outcome == 'success' || steps.increment-version-node.outcome == 'success')
        run: |
          git tag -a "${{ env.RELEASE_VERSION }}" -m "Release version ${{ env.RELEASE_VERSION }}"
          git push origin "${{ env.RELEASE_VERSION }}"

      - name: Cleanup Version Increment and Tag (if build fails)
        if: failure() && (steps.increment-version-maven.outcome == 'success' || steps.increment-version-node.outcome == 'success')
        run: |
          git reset --hard HEAD~1 || true
          if git tag | grep -q "${{ env.RELEASE_VERSION }}"; then
            git tag -d "${{ env.RELEASE_VERSION }}" || true
            git push --delete origin "${{ env.RELEASE_VERSION }}" || true
          fi

      - name: Slack notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}