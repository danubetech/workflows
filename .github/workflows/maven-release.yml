name: Maven Release

on:
  workflow_call:
    inputs:
      MAVEN_REPO_SERVER_ID:
        type: string
        description: 'Maven repository server ID'
        required: true
      RELEASE_TYPE:
        type: string
        description: 'Type of release: major, minor, or patch'
        required: false
        default: 'minor'
      JAVA_VERSION:
        type: string
        description: 'Java version to use'
        required: false
        default: '21'
      USE_DEPLOY_KEY:
        type: boolean
        description: 'Whether to use deploy key for repository access'
        required: false
        default: false
    secrets:
      VAULT_ADDR:
        required: true
      CI_SECRET_READER_PERIODIC_TOKEN:
        required: true
      VAULTCA:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      DEPLOY_KEY:
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Install SSH key
        if: ${{ inputs.USE_DEPLOY_KEY }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Checkout code (Private repo)
        if: ${{ inputs.USE_DEPLOY_KEY }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Checkout code (Public repo)
        if: ${{ !inputs.USE_DEPLOY_KEY }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Import Secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.CI_SECRET_READER_PERIODIC_TOKEN }}
          caCertificate: ${{ secrets.VAULTCA }}
          secrets: |
            ci/data/gh-workflows/maven-danubetech-nexus username | MAVEN_USERNAME ;
            ci/data/gh-workflows/maven-danubetech-nexus password | MAVEN_PASSWORD

      - name: Setup Maven settings.xml
        run: |
          echo "<settings>
            <servers>
              <server>
                <id>${{ inputs.MAVEN_REPO_SERVER_ID }}</id>
                <username>${{ env.MAVEN_USERNAME }}</username>
                <password>${{ env.MAVEN_PASSWORD }}</password>
              </server>
            </servers>
          </settings>" > ~/.m2/settings.xml

      - name: Calculate versions
        run: |
          # Get current version (e.g., 0.1-SNAPSHOT)
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          # Extract components
          MAJOR_VERSION=$(echo $CURRENT_VERSION | sed -E 's/([0-9]+)\..*/\1/')
          MINOR_VERSION=$(echo $CURRENT_VERSION | sed -E 's/([0-9]+)\.([0-9]+).*/\2/')
          PATCH_VERSION=0
          
          # Remove -SNAPSHOT and append .0 for release version (0.1-SNAPSHOT -> 0.1.0)
          RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}.0
          
          # Calculate next development version based on RELEASE_TYPE
          case "${{ inputs.RELEASE_TYPE }}" in
            "major")
              # Increment major version (0.1.0 -> 1.0-SNAPSHOT)
              NEXT_MAJOR=$((MAJOR_VERSION + 1))
              DEV_VERSION="$NEXT_MAJOR.0-SNAPSHOT"
              ;;
            "minor")
              # Increment minor version (0.1.0 -> 0.2-SNAPSHOT)
              NEXT_MINOR=$((MINOR_VERSION + 1))
              DEV_VERSION="$MAJOR_VERSION.$NEXT_MINOR-SNAPSHOT"
              ;;
            "patch")
              # Increment patch version (0.1.0 -> 0.1.1-SNAPSHOT)
              DEV_VERSION="$MAJOR_VERSION.$MINOR_VERSION.1-SNAPSHOT"
              ;;
            *)
              echo "Invalid release type: ${{ inputs.RELEASE_TYPE }}. Must be major, minor, or patch"
              exit 1
              ;;
          esac
          
          # Export for next steps
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV
          
          echo "Current version: $CURRENT_VERSION"
          echo "Release type: ${{ inputs.RELEASE_TYPE }}"
          echo "Release version: $RELEASE_VERSION"
          echo "Next development version: $DEV_VERSION"

      - name: Perform Maven Release
        run: |
          mvn -B release:prepare release:perform \
            -DreleaseVersion=${{ env.RELEASE_VERSION }} \
            -DdevelopmentVersion=${{ env.DEV_VERSION }} \
            -DtagNameFormat=@{project.version} \
            -DpushChanges=true \
            -DlocalCheckout=true \
            -DpreparationGoals="clean verify" \
            -DcompletionGoals="clean verify" \
            -DscmCommentPrefix="[maven-release-plugin] "

      - name: Slack notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
